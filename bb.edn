{:deps {jmglov/jmglov {:local/root "."}
        io.github.borkdude/quickblog {:local/root "../clojure/quickblog"}
        #_"You use the newest SHA here:"
        #_{:git/sha "b69c11f4292702f78a8ac0a9f32379603bebf2af"}
        }
 :pods {clj-kondo/clj-kondo {:version "2022.05.31"}}
 :tasks
 {:requires ([babashka.cli]
             [babashka.fs :as fs]
             [babashka.process :as p]
             [clojure.edn :as edn]
             [clojure.string :as str]
             [quickblog.api :as qb]
             [quickblog.cli :as cli])
  :init (def opts (-> (slurp "opts.edn") edn/read-string))

  quickblog {:doc "Start blogging quickly! Run `bb quickblog help` for details."
             :task (cli/dispatch opts)}

  new {:doc "Create new blog article"
       :task (qb/new (merge opts
                            {:preview true
                             :template-file "blog/new-post.md"}))}

  new-draft {:doc "Create a draft for a blog article"
             :task (let [{:keys [file title date] :as parsed-opts}
                         (babashka.cli/parse-opts (seq *command-line-args*)
                                                  {:coerce {:tags []}})]
                     (if (:help parsed-opts)
                       (println "Usage: bb new-draft --file FILE --title TITLE [--date DATE]")
                       (let [file' (format "%s-%s" (or date "draft") file)]
                         (qb/new (merge opts
                                        parsed-opts
                                        {:file file'
                                         :title (or title
                                                    (-> file
                                                        (str/replace "-" " ")
                                                        str/capitalize))
                                         :date (or date "FIXME")
                                         :image (format "%s-preview.png"
                                                        (str/replace file' (re-pattern "[.]md$") ""))
                                         :preview true
                                         :template-file "blog/new-post.md"})))))}

  refresh-templates {:doc "Update to latest templates."
                     :task (qb/refresh-templates opts)}

  render {:doc "Render website"
          :task (load-file "render.clj")}

  render-blog {:doc "Render blog"
               :requires ([quickblog.internal :as lib])
               :task (let [{:keys [favicon-dir out-dir]} opts]
                       (fs/create-dirs out-dir)
                       (doseq [path (fs/glob favicon-dir "**")
                               :let [source (fs/file path)
                                     target (fs/file out-dir (fs/file-name source))]]
                         (when (seq (fs/modified-since target source))
                           (println "favicon modified; copying"
                                    (str source) "->" (str target))
                           (fs/copy source target {:replace-existing true})))
                       (qb/quickblog opts))}

  publish {:doc "Publish to jmglov.net"
           :depends [render publish-blog]
           :task (shell "aws s3 sync public/ s3://jmglov.net/")}

  publish-blog {:doc "Publish blog"
                #_:depends #_[render-blog]
                :task (shell "aws s3 sync --delete public/blog/ s3://jmglov.net/blog/")}

  clean {:doc "Remove .work and public directory"
         :task (do (fs/delete-tree ".cache")
                   (fs/delete-tree "public"))}

  watch  {:doc "Watch posts and templates and render file changes"
          :task (qb/watch opts)}}}
